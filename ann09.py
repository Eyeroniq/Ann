# -*- coding: utf-8 -*-
"""ann09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cj15jLo46SbaMQttBdcbE5Kq1nBTjt-x
"""

import numpy as np

def initialize_weights(input_size, category_size, rho=0.5):
    weights = np.random.rand(category_size, input_size)
    print("Weights :\n",weights)
    weights *= rho / np.linalg.norm(weights, axis=1)[:, np.newaxis]
    return weights

def normalize_input(input_vector):
    return input_vector / np.linalg.norm(input_vector)

def compute_activation(weights, input_vector):
    return np.dot(weights, input_vector)

def ART(input_vector, weights, beta=1.0, vigilance=0.9, max_iterations=100):
    input_vector = normalize_input(input_vector)
    num_categories = weights.shape[0]
    for _ in range(max_iterations):
        activations = compute_activation(weights, input_vector)
        category_index = np.argmax(activations)
        category_activation = activations[category_index]
        input_category_distance = np.dot(weights[category_index], input_vector)
        category_length = np.linalg.norm(weights[category_index])
        vigilance_condition = input_category_distance / category_length
        if vigilance_condition >= vigilance:
            return category_index
        else:
            weights[category_index] = (beta * weights[category_index] + input_vector) / (1 + beta)
    return -1

# Example usage
category_size = 4
input_vector = np.array([0.8, 0.3, 0.2, 0.2])
input_size = len(input_vector)
weights = initialize_weights(input_size, category_size)
category_index = ART(input_vector, weights)
print("Input vector belongs to category:", category_index)

