# -*- coding: utf-8 -*-
"""ann11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rit3Oshy7caz6oKk9qegESo2FZ0aTZyR
"""

import numpy as np

def train_hopfield_network(patterns):
    num_patterns, pattern_length = patterns.shape
    weights = np.zeros((pattern_length, pattern_length))
    for pattern in patterns:
        pattern = pattern.reshape(-1, 1)  # Convert pattern to column vector
        weights += np.dot(pattern, pattern.T)
    np.fill_diagonal(weights, 0)  # Diagonal elements are set to zero
    return weights / num_patterns

def update_hopfield_network(weights, input_pattern, max_iterations=100):
    pattern_length = len(input_pattern)
    for _ in range(max_iterations):
        prev_pattern = input_pattern.copy()
        for i in range(pattern_length):
            input_pattern[i] = np.sign(np.dot(weights[i], input_pattern))
        if np.array_equal(input_pattern, prev_pattern):
            break
    return input_pattern

# Example patterns
patterns = np.array([[1, -1, 1, -1],
                     [1, 1, -1, -1],
                     [-1, -1, 1, 1],
                     [-1, 1, -1, 1]])

# Train the Hopfield network
weights = train_hopfield_network(patterns)

# Test the Hopfield network
test_pattern = np.array([1, -1, 1, -1])
print("Original pattern:", test_pattern)
retrieved_pattern = update_hopfield_network(weights, test_pattern)
# print("Original pattern:", test_pattern)
print("Retrieved pattern:", retrieved_pattern)

