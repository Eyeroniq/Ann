# -*- coding: utf-8 -*-
"""ann03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y18v-aVPZKmjCgiOdplomjCwKKUmO3ed
"""

import numpy as np

def initialize_neuron(input_size):
    weights = np.zeros(input_size)
    bias = 0
    return weights, bias

# Prediction function of the McCulloch-Pitts neuron
def predict_neuron(inputs, weights, bias):
    linear_combination = np.dot(weights, inputs) + bias
    return 1 if linear_combination >= 0 else 0

# Inputs and expected outputs for the "AND NOT" operation
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
expected_outputs = np.array([0, 0, 1, 0])

# Initialize neuron
neuron_weights, neuron_bias = initialize_neuron(2)

# Training parameters
learning_rate = 0.1
epochs = 10

# Training loop
for epoch in range(epochs):
    for input, expected_output in zip(inputs, expected_outputs):
        prediction = predict_neuron(input, neuron_weights, neuron_bias)
        error = expected_output - prediction
        neuron_weights += learning_rate * error * input
        neuron_bias += learning_rate * error

# Testing
for input in inputs:
    print(f"Inputs: {input}")
    if predict_neuron(input, neuron_weights, neuron_bias) == 1:
        print("ANDNOT output: True")
    else:
        print("ANDNOT output: False")

